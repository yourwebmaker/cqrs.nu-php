# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    cafe.database.url: '%env(resolve:CAFE_DATABASE_URL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Cafe\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Cafe\UserInterface\Web\Controller\:
        resource: '../src/UserInterface/Web/Controller/'
        tags: ['controller.service_arguments']

    Cafe\Domain\Tab\TabRepository:
        # the first argument is the class and the second argument is the static method
        factory: [ '@Cafe\Infra\ServiceFactory\TabRepositoryFactory', 'create' ]

    Doctrine\DBAL\Connection:
        # the first argument is the class and the second argument is the static method
        factory: [ '@Cafe\Infra\ServiceFactory\DoctrineFactory', 'create' ]
        arguments: ['%cafe.database.url%']

    League\Tactician\CommandBus:
        # the first argument is the class and the second argument is the static method
        factory: [ '@Cafe\Infra\ServiceFactory\TacticianFactory', 'create' ]


    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Twig\Extra\Intl\IntlExtension:
        tags: [ twig.extension ]